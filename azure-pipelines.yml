# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

stages:
- stage: build
  jobs:
  - job: 'BuildArtifacts'
    pool:
      vmImage: 'ubuntu-latest'
      name: 'Azure Pipelines'
    steps:
    # Install DotNetSdk 3.x
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.x'

    # build with Cake
    - task: Bash@3
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build.sh'
        arguments: '-verbosity=$(cakeVerbosity) -target=$(cakeTaskName) -Configuration=$(buildConfiguration) -Runtime=$(buildRuntime)'

    # Copy PublishDirectory && TestResults To '$(build.artifactstagingdirectory)'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/artifacts'
        Contents: '**'
        TargetFolder: '$(build.artifactstagingdirectory)'
        flattenFolders: false

    # Show Files IN '$(build.artifactstagingdirectory)'    
    - task: CmdLine@2
      inputs:
        script: |
          echo 'Copied Files List In build.artifactstagingdirectory:'
          cd $(build.artifactstagingdirectory)
          ls -R
          echo 'End'
        workingDirectory: '$(Build.ArtifactStagingDirectory)'

    # Publish PipelineArtifact
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'drop'
        publishLocation: 'pipeline'

  - job: 'BuildAndPushDockerImage'
    pool:
      vmImage: 'ubuntu-latest'
      name: 'Azure Pipelines'
    variables:
      KB.Container.RegistryNameSpace: 'kane-blake'
    dependsOn: 'BuildArtifacts'
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: CmdLine@2
      inputs:
        script: |
          cd $(Build.ArtifactStagingDirectory)
          pwd
          echo 'Start'
          ls -R
          echo 'End'
    # Set Variables for Next Task
    - task: CmdLine@2
      inputs:
        script: |
          imageVersion=`cat version`
          echo "version: $imageVersion"
          echo "##vso[task.setvariable variable=KB.Container.Image.Version;]$imageVersion"
          KBRepositoryName=$(Build.Repository.Id)
          echo KBRepositoryName: $KBRepositoryName
          KBRepositoryName=${KBRepositoryName,,}
          KBRepositoryName=${KBRepositoryName//\//-}
          echo KBRepositoryName: $KBRepositoryName
          echo "##vso[task.setvariable variable=KB.Container.Repository.Name;]$KBRepositoryName"
        workingDirectory: '$(Build.ArtifactStagingDirectory)/publish'
    # Set Variables for Next Job(Next Task Cannot access output variables)
    - task: CmdLine@2
      name: 'SetContainerImageInfo'
      inputs:
        script: |
          echo "##vso[task.setvariable variable=KB.Container.Repository.Name;isOutput=true]$(KB.Container.Repository.Name)"
          echo "##vso[task.setvariable variable=KB.Container.Image.Version;isOutput=true]$(KB.Container.Image.Version)"
          echo KB.Container.Repository.Name: $(KB.Container.Repository.Name)
          echo KBRepositoryName: $(KB.Container.Image.Version)
    - task: Docker@2
      inputs:
        containerRegistry: '阿里云容器镜像私有仓库服务'
        repository: '$(KB.Container.RegistryNameSpace)/$(KB.Container.Repository.Name)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.ArtifactStagingDirectory)/publish/LightBlog/Dockerfile'
        buildContext: '$(Build.ArtifactStagingDirectory)/publish/LightBlog'
        tags: '$(KB.Container.Image.Version)'
  - job: 'PullAndRunContainer'
    pool:
      name: 'ContainerOnNoteBook'
    dependsOn: 'BuildAndPushDockerImage'
    variables:
      KB.Container.Repository.Name: $[ dependencies.BuildAndPushDockerImage.outputs['SetContainerImageInfo.KB.Container.Repository.Name'] ]
      KB.Container.Image.Version: $[ dependencies.BuildAndPushDockerImage.outputs['SetContainerImageInfo.KB.Container.Image.Version'] ]
    steps:
    - checkout: none
    - task: CmdLine@2
      inputs:
        script: |
          echo KB.Container.Repository.Name: $(KB.Container.Repository.Name)
          echo KBRepositoryName: $(KB.Container.Image.Version)