# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
variables: 
- name: 'KB.ArtifactName'
  value: 'drop'
stages:
- stage: BuildSrcCode
  jobs:
  - job: 'BuildArtifacts'
    pool:
      vmImage: 'ubuntu-latest'
      name: 'Azure Pipelines'
    steps:
    - task: UseDotNet@2
      name: 'InstallDotNetCoreSdk3_x'
      inputs:
        packageType: 'sdk'
        version: '3.x'
    - task: Bash@3
      name: 'BuildWithCake'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build.sh'
        arguments: '-verbosity=$(cakeVerbosity) -target=$(cakeTaskName) -Configuration=$(buildConfiguration) -Runtime=$(buildRuntime)'
    - publish: '$(Build.SourcesDirectory)/artifacts'
      artifact: '$(KB.ArtifactName)'

- stage: 'DevDeployment'
  dependsOn: 'BuildSrcCode'
  jobs:
  # deployment job will Download pipeline artifact in '$(Pipeline.Workspace)/$(artifactName)' automatically
  - deployment: 'deployToTencentCloud'
    pool:
      name: 'AgentOnTencentCloud'
    environment: 'smarthotel-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: CopyFiles@2
            displayName: 'Copy Files to: /home/ubuntu/Artifacts'
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/$(KB.ArtifactName)/publish'
              TargetFolder: /home/ubuntu/Artifacts
              CleanTargetFolder: true
          - task: CmdLine@2
            inputs:
              script: |
                echo 'Start Deploy WebApp'
                sudo systemctl stop LightBlogWebApp.service
                cd ~/www/
                sudo rm -r LightBlog/
                \cp -rf ../Artifacts/. ./
                sudo systemctl start LightBlogWebApp.service

- stage: 'ProcDeployment'
  dependsOn: 'BuildSrcCode'
  jobs:
  - job: 'BuildAndPushImage'
    pool:
      vmImage: 'ubuntu-latest'
      name: 'Azure Pipelines'
    steps:
    - checkout: none
    - download: current
      artifact: '$(KB.ArtifactName)'

    - task: CmdLine@2
      inputs:
        script: |
          cd $(Pipeline.Workspace)
          pwd
          echo 'Start'
          ls -R
          echo 'End'
    # Set Variables for Next Task
    # Set Variables for Next Job(Next Task Cannot access output variables)
    - task: CmdLine@2
      name: 'SetContainerImageInfo'
      inputs:
        script: |
          imageVersion=`cat version`
          echo "read version from file: $imageVersion"
          KBRepositoryName=$(Build.Repository.Id)
          KBRepositoryName=${KBRepositoryName,,}
          KBRepositoryName=${KBRepositoryName//\//-}
          echo "get RepositoryName from Build.Repository.Id: $KBRepositoryName"
          echo "##vso[task.setvariable variable=KB.Container.Repository.Name;]$KBRepositoryName"
          echo "##vso[task.setvariable variable=KB.Container.Image.Version;]$imageVersion"
          echo "##vso[task.setvariable variable=KB.Container.Repository.Name;isOutput=true]$KBRepositoryName"
          echo "##vso[task.setvariable variable=KB.Container.Image.Version;isOutput=true]$imageVersion"
        workingDirectory: '$(Pipeline.Workspace)/$(KB.ArtifactName)/publish'

    - task: Docker@2
      name: 'PushToAliyunRegistry'
      inputs:
        containerRegistry: '阿里云容器镜像私有仓库服务'
        repository: '$(KB.Container.RegistryNameSpace)/$(KB.Container.Repository.Name)'
        command: 'buildAndPush'
        Dockerfile: '$(Pipeline.Workspace)/$(KB.ArtifactName)/publish/LightBlog/Dockerfile'
        buildContext: '$(Pipeline.Workspace)/$(KB.ArtifactName)/publish/LightBlog'
        tags: '$(KB.Container.Image.Version)'

  - job: 'PullAndRunContainer'
    pool:
      name: 'ContainerOnNoteBook'
    dependsOn: 'BuildAndPushImage'
    variables:
      KB.Container.Repository.Name: $[ dependencies.BuildAndPushImage.outputs['SetContainerImageInfo.KB.Container.Repository.Name'] ]
      KB.Container.Image.Version: $[ dependencies.BuildAndPushImage.outputs['SetContainerImageInfo.KB.Container.Image.Version'] ]
    steps:
    - checkout: none
    - task: CmdLine@2
      inputs:
        script: |
          echo KB.Container.Repository.Name: $(KB.Container.Repository.Name)
          echo KBRepositoryName: $(KB.Container.Image.Version)

