<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KaneBlake.Basis</name>
    </assembly>
    <members>
        <member name="T:KaneBlake.Basis.Domain.Entities.AggregateRoot`1">
            <summary>
            聚合根抽象类
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.Entity`1">
            <summary>
            实体抽象类
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.EntityKey">
            <summary>
            重写实体 ==运算符、Equals、GetHashCode()、ToString()方法
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Entities.EntityKey.op_Equality(KaneBlake.Basis.Domain.Entities.EntityKey,KaneBlake.Basis.Domain.Entities.EntityKey)">
            <summary>
            在没有重写 == 运算符的情况下，调用 OpCodes.Ceq 指令比较堆栈中的值
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.IAggregateRoot`1">
            <summary>
            聚合根接口
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.IEntity`1">
            <summary>
            实体接口
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="P:KaneBlake.Basis.Domain.Entities.IEntity`1.Id">
            <summary>
            实体唯一主键
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Repositories.IRepository`2">
            <summary>
            聚合根实现泛型仓储接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Uow.IUnitOfWork">
            <summary>
            工作单元接口
            仓储继承IUnitOfWork
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Uow.IUnitOfWork.CompleteAsync">
            <summary>
            工作单元提交
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:KaneBlake.Basis.Extensions.Common.Abstractions.Singleton`1" -->
        <member name="T:KaneBlake.Basis.Extensions.Common.PipeReaderExtensions">
            <summary>
            Extensions of PipeReader
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Common.PipeReaderExtensions.ReadToEndAsync(System.IO.Pipelines.PipeReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads to the end of the current System.IO.Pipelines.PipeReader.
            Requires a call to BodyReader.Advance after use ReadResult.Buffer
            </summary>
            <param name="pipeReader"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions">
            <summary>
            Extensions to RSA Certificate
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.GetX509Certificate(System.String,System.String)">
            <summary>
            Get pfx Certificate from filePath
            </summary>
            <param name="certificatePath"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.GetPKCS1PublicKeyASN1Body(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Attempts to export the current key in the PKCS#1 PublicKey format into byte[] without Prefix and Endfix
            https://lapo.it/asn1js/
            https://etherhack.co.uk/asymmetric/docs/rsa_key_breakdown.html
            https://blog.csdn.net/pcjustin/article/details/79084232
            https://tools.ietf.org/html/rfc3447#appendix-A.1.1
            RSAPublicKey::= SEQUENCE {
                modulus INTEGER,  --n
                publicExponent INTEGER   --e
            }
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.ExportRSAPKCS1PublicKeyMS(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Attempts to export the current key in the PKCS#1 RSAPublicKey format into string(Microsoft)
            </summary>
            <param name="certificate">current key</param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.ExportRSAPKCS1PublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Attempts to export the current key in the PKCS#1 PublicKey format into string
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.ExportRSAPKCS8PublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Attempts to export the current key in the PKCS#8 PublicKey format into string
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.DecryptFromBase64String(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            decrypt string from Base64String with RSAPrivateKey
            </summary>
            <param name="certificate"></param>
            <param name="cipherB64str"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.DecryptFromUTF8bytes(System.Security.Cryptography.X509Certificates.X509Certificate2,System.ReadOnlySpan{System.Byte})">
            <summary>
            decrypt string from ReadOnlySpan[byte] with RSAPrivateKey
            </summary>
            <param name="certificate"></param>
            <param name="cipherBytes"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.ReadOnlySpan{System.Byte})">
            <summary>
            decrypt data with RSAPrivateKey
            </summary>
            <param name="certificate"></param>
            <param name="cipherBytes"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.BytesPadLeft(System.Byte[],System.Int32)">
            <summary>
            数组高位补0x00
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.BytesPadHigher(System.Byte[],System.Int32)">
            <summary>
            高位字节补0x00
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.GetBytesTrim(System.Int32)">
            <summary>
            去除int整数数值 byte[] 中的高位0x00字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.CombineByteArray(System.Byte[][])">
            <summary>
            合并字节数组
            </summary>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Extensions.Cryptography.CertificateExtensions.GetASN1_Data(System.Byte[],System.Byte[])">
            <summary>
            构建ASN1数据节点
            [0x02,0x03,0x01,0x00,0x01]
            [标识符(1 byte),数据长度(1 byte),{数据(n byte)}]
            [标识符(1 byte),数据长度的长度(1 byte),{数据长度(n byte)},{数据(n byte)}]
            https://www.cnblogs.com/NathanYang/p/9951282.html
            不支持构建 bit流长度 %8 != 0 的 BIT STRING,比如 BIT STRING (4 bit) 1111
            </summary>
            <param name="tag"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Extensions.Diagnostics.DiagnosticAdapterProcessorObserver">
            <summary>
            支持属性绑定和对象绑定
            性能: 对象、属性绑定(80ns) > Microsoft.Extensions.DiagnosticAdapter(140ns)
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Extensions.Diagnostics.DiagnosticProcessorObserver">
            <summary>
            默认实现使用 Microsoft.Extensions.DiagnosticAdapter 作为适配器
            方法参数只支持属性绑定(匿名对象和非匿名对象在性能上基本无差别)
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Infrastruct.EntityFrameworkCore.EFRepository`1">
            <summary>
            EF对IRepository的实现
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:KaneBlake.Basis.Infrastruct.EntityFrameworkCore.TEntityContext`2">
            <summary>
            领域聚合根上下文对象
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TSelf"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CoreWeb.Util.Infrastruct.SqlClientHelp.ReadDataTable(System.String,System.String,System.Collections.Generic.List{Microsoft.Data.SqlClient.SqlParameter})" -->
        <member name="T:CoreWeb.Util.Services.ServiceResponse">
            <summary>
            Service 层响应格式
            </summary>
        </member>
        <member name="P:CoreWeb.Util.Services.ServiceResponse.Code">
            <summary>
            服务接口响应状态码
            </summary>
        </member>
        <member name="P:CoreWeb.Util.Services.ServiceResponse.Message">
            <summary>
            状态码: 2000/4000 之外的错误消息
            </summary>
        </member>
        <member name="P:CoreWeb.Util.Services.ServiceResponse.OKStatus">
            <summary>
            服务接口是否正常响应
            </summary>
        </member>
        <member name="M:CoreWeb.Util.Services.ServiceResponse.OK">
            <summary>
            Code = 2000: 正常响应
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreWeb.Util.Services.ServiceResponse.Redirect(System.String)">
            <summary>
            Code = 302: 重定向
            </summary>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:CoreWeb.Util.Services.ServiceResponse.InnerException(System.Exception)">
            <summary>
            状态码: 5000 内部异常 日志记录
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:CoreWeb.Util.Services.ServiceResponse.Forbid(System.String)">
            <summary>
            状态码: 4003 禁止操作
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CoreWeb.Util.Services.ServiceResponse.Unauthorized">
            <summary>
            状态码: 4001 未授权
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreWeb.Util.Services.ServiceResponse.OK``1(``0)">
            <summary>
            Code = 2000: 正常响应
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CoreWeb.Util.Services.ServiceResponse.BadRequest``1(``0)">
            <summary>
            状态码: 4000 错误的请求信息:参数检验失败等等
            </summary>
            <param name="moelState"></param>
            <returns></returns>
        </member>
        <member name="T:CoreWeb.Util.Services.ServiceResponse`1">
            <summary>
            包含泛型 Data 的 Service 层响应格式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CoreWeb.Util.Services.ServiceResponse`1.Data">
            <summary>
            状态码: 2000 响应数据/状态码: 3002 重定向Url
            </summary>
        </member>
        <member name="T:CoreWeb.Util.Services.ServiceStatusCodes">
            <summary>
            服务响应状态码
            </summary>
        </member>
        <member name="F:CoreWeb.Util.Services.ServiceStatusCodes.Status2000OK">
            <summary>
            正常响应状态码
            </summary>
        </member>
    </members>
</doc>
