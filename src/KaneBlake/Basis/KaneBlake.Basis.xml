<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KaneBlake.Basis</name>
    </assembly>
    <members>
        <member name="T:KaneBlake.Basis.Common.Cryptography.CertificateExtensions">
            <summary>
            Extensions to RSA Certificate
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.GetX509Certificate(System.String,System.String)">
            <summary>
            Get pfx Certificate from filePath
            </summary>
            <param name="certificatePath"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.GetPKCS1PublicKeyASN1Body(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Attempts to export the current key in the PKCS#1 PublicKey format into byte[] without Prefix and Endfix
            https://lapo.it/asn1js/
            https://etherhack.co.uk/asymmetric/docs/rsa_key_breakdown.html
            https://blog.csdn.net/pcjustin/article/details/79084232
            https://tools.ietf.org/html/rfc3447#appendix-A.1.1
            RSAPublicKey::= SEQUENCE {
                modulus INTEGER,  --n
                publicExponent INTEGER   --e
            }
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.ExportRSAPKCS1PublicKeyMS(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Attempts to export the current key in the PKCS#1 RSAPublicKey format into string(Microsoft)
            </summary>
            <param name="certificate">current key</param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.ExportRSAPKCS1PublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Attempts to export the current key in the PKCS#1 PublicKey format into string
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.ExportRSAPKCS8PublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Attempts to export the current key in the PKCS#8 PublicKey format into string
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.DecryptFromBase64String(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            decrypt string from Base64String with RSAPrivateKey
            </summary>
            <param name="certificate"></param>
            <param name="cipherB64str"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.DecryptFromUTF8bytes(System.Security.Cryptography.X509Certificates.X509Certificate2,System.ReadOnlySpan{System.Byte})">
            <summary>
            decrypt string from ReadOnlySpan[byte] with RSAPrivateKey
            </summary>
            <param name="certificate"></param>
            <param name="cipherBytes"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2,System.ReadOnlySpan{System.Byte})">
            <summary>
            decrypt data with RSAPrivateKey
            </summary>
            <param name="certificate"></param>
            <param name="cipherBytes"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.BytesPadLeft(System.Byte[],System.Int32)">
            <summary>
            数组高位补0x00
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.BytesPadHigher(System.Byte[],System.Int32)">
            <summary>
            高位字节补0x00
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.GetBytesTrim(System.Int32)">
            <summary>
            去除int整数数值 byte[] 中的高位0x00字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.CombineByteArray(System.Byte[][])">
            <summary>
            合并字节数组
            </summary>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Cryptography.CertificateExtensions.GetASN1_Data(System.Byte[],System.Byte[])">
            <summary>
            构建ASN1数据节点
            [0x02,0x03,0x01,0x00,0x01]
            [标识符(1 byte),数据长度(1 byte),{数据(n byte)}]
            [标识符(1 byte),数据长度的长度(1 byte),{数据长度(n byte)},{数据(n byte)}]
            https://www.cnblogs.com/NathanYang/p/9951282.html
            不支持构建 bit流长度 %8 != 0 的 BIT STRING,比如 BIT STRING (4 bit) 1111
            </summary>
            <param name="tag"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Common.DataAnnotations.CheckConstraintInAttribute">
            <summary>
            CheckConstraint validation attribute
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Common.DataAnnotations.CheckConstraintInAttribute.#ctor(System.Object[])">
            <summary>
            初始化 <see cref="T:KaneBlake.Basis.Common.DataAnnotations.CheckConstraintInAttribute"/> 类的实例.
            </summary>
            <param name="validValues"></param>
        </member>
        <member name="M:KaneBlake.Basis.Common.DataAnnotations.CheckConstraintInAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化字段验证失败时的错误消息
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.DataAnnotations.CheckConstraintInAttribute.IsValid(System.Object)">
            <summary>
            使用 Equals 方法判断字段是否合法, 非基础类型需要重写 Equals 方法
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Extensions.TypeExtensions.GetInterfaceProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            获取接口属性
            </summary>
            <param name="type"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Common.Serialization.DateTimeJsonConverter">
            <summary>
             Converts an value of DateTime to or from JSON.
             反序列化失败时返回默认值, 和不传递该参数的行为一致
             可空值类型默认使用其值类型的 JsonConverter
             <see href="https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Value/NullableConverter.cs"/>
             <see href="https://docs.microsoft.com/zh-cn/dotnet/standard/datetime/system-text-json-support"/>
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Common.Serialization.DateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type DateTime.
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Serialization.DateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a value of DateTime as JSON.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KaneBlake.Basis.Common.Serialization.DateTimeOffsetJsonConverter">
            <summary>
            Converts an value of DateTimeOffset to or from JSON.
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Common.Serialization.DateTimeOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type DateTimeOffset.
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Serialization.DateTimeOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a value of DateTimeOffset as JSON.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KaneBlake.Basis.Common.Serialization.JsonExtensions">
            <summary>
            Extension Methods based on <see cref="N:System.Text.Json"/>
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Common.Serialization.JsonExtensions.Configure(System.Text.Json.JsonSerializerOptions,System.Action{System.Text.Json.JsonSerializerOptions})">
            <summary>
            Configure <see cref="T:System.Text.Json.JsonSerializerOptions"/> With default Vaule
            </summary>
            <param name="options"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Common.Serialization.StringTrimJsonConverter">
            <summary>
            Converts an value of string to or from JSON.
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Common.Serialization.StringTrimJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type string.
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Common.Serialization.StringTrimJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a value of string as JSON.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KaneBlake.Basis.Common.Singleton`1">
            <summary>
            基于 Lazy<T/> 的单例模式实现
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:KaneBlake.Basis.Common.Singleton`1.lazyT">
            <summary>
            静态字段是线程安全的
            实现单例模式的重点：对静态字段只能初始化一次
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Common.Singleton`1.#cctor">
            <summary>
            静态构造函数：初始化所有静态成员（只会被执行一次）
            默认Lazy<T/>构造函数使用ExecutionAndPublication双检锁技术
            PublicationOnly:通过CompareExchange实现
            T的构造函数只能是Func<T/>
            </summary>
        </member>
        <member name="P:KaneBlake.Basis.Common.Singleton`1.Instance">
            <summary>
            通过 Lazy.Value 的懒加载实现延迟访问
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Common.Threading.LockProvider`1">
            <summary>
            A LockProvider based upon the SemaphoreSlim class to selectively lock objects, resources or statement blocks 
            according to given unique IDs in a sync or async way.
            <see href="https://github.com/Darkseal/LockProvider/blob/master/LockProvider.cs"/>
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Common.Threading.LockProvider`1.Wait(`0)">
            <summary>
            Blocks the current thread (according to the given ID) until it can enter the LockProvider
            </summary>
            <param name="id">the unique ID to perform the lock</param>
        </member>
        <member name="M:KaneBlake.Basis.Common.Threading.LockProvider`1.WaitAsync(`0)">
            <summary>
            Asynchronously puts thread to wait (according to the given ID) until it can enter the LockProvider
            </summary>
            <param name="id">the unique ID to perform the lock</param>
        </member>
        <member name="M:KaneBlake.Basis.Common.Threading.LockProvider`1.Release(`0)">
            <summary>
            Releases the lock (according to the given ID)
            </summary>
            <param name="id">the unique ID to unlock</param>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.AggregateRoot`1">
            <summary>
            聚合根抽象类
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.Entity`1">
            <summary>
            实体抽象类
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.EntityKey">
            <summary>
            重写实体 ==运算符、Equals、GetHashCode()、ToString()方法
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Entities.EntityKey.op_Equality(KaneBlake.Basis.Domain.Entities.EntityKey,KaneBlake.Basis.Domain.Entities.EntityKey)">
            <summary>
            在没有重写 == 运算符的情况下，调用 OpCodes.Ceq 指令比较堆栈中的值
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.IAggregateRoot`1">
            <summary>
            聚合根接口
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Entities.IEntity`1">
            <summary>
            实体接口
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="P:KaneBlake.Basis.Domain.Entities.IEntity`1.Id">
            <summary>
            实体唯一主键
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Repositories.IRepository`2">
            <summary>
            聚合根实现泛型仓储接口
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Repositories.IRepository`2.Get">
            <summary>
            返回 IQueryable 查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Repositories.IRepository`2.Get(`1)">
            <summary>
            根据主键查找实体
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Repositories.IRepository`2.Add(`0)">
            <summary>
            增加实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Repositories.IRepository`2.Remove(`1)">
            <summary>
            根据主键删除实体
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Repositories.IRepository`2.Remove(`0)">
            <summary>
            删除实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Repositories.IRepository`2.Count">
            <summary>
            获取实体数量
            </summary>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Domain.Uow.IUnitOfWork">
            <summary>
            工作单元接口
            仓储继承IUnitOfWork
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Domain.Uow.IUnitOfWork.CompleteAsync">
            <summary>
            工作单元提交
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Services.ServiceResponse">
            <summary>
            Service、WebApi 层响应格式
            <code>
            <para>请求成功: { statusCode: 2000, result: {} }  <seealso cref="P:KaneBlake.Basis.Services.ServiceResponse`1.Result"/></para>
            <para>参数验证失败: { statusCode: 4000, errors: {"modelName": ["modelError1","modelError2"] }} <seealso cref="P:KaneBlake.Basis.Services.ServiceProblemResponse`1.Errors"/></para>
            <para>禁止操作: {statusCode: 4003, message: "详细错误消息"} <seealso cref="P:KaneBlake.Basis.Services.ServiceResponse.Message"/></para>
            <para>系统错误: {statusCode: 5000, message: "详细错误消息"} <seealso cref="P:KaneBlake.Basis.Services.ServiceResponse.Message"/></para>
            </code>
            </summary>
            <remarks>自定义序列化: src\Mvc\Mvc.Core\src\Infrastructure\ProblemDetailsJsonConverter.cs</remarks>
            <summary>
            ServiceResponse 静态方法, 用于生成 ServiceResponse 实例
            </summary>
        </member>
        <member name="P:KaneBlake.Basis.Services.ServiceResponse.StatusCode">
            <summary>
            服务接口响应状态码
            </summary>
            <example>2000</example>
        </member>
        <member name="P:KaneBlake.Basis.Services.ServiceResponse.Message">
            <summary>
            服务响应消息
            </summary>
            <example>service request sucess.</example>
        </member>
        <member name="P:KaneBlake.Basis.Services.ServiceResponse.Extensions">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IDictionary`2"/> for extension members.
            </summary>
        </member>
        <member name="P:KaneBlake.Basis.Services.ServiceResponse.OKStatus">
            <summary>
            服务接口是否正常响应
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponse.OK">
            <summary>
            Code = 2000: 正常响应
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponse.Redirect(System.String)">
            <summary>
            Code = 3002: 重定向
            </summary>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponse.InnerException">
            <summary>
            状态码: 5000 内部异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponse.Forbid(System.String)">
            <summary>
            状态码: 4003 禁止操作
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponse.Unauthorized">
            <summary>
            状态码: 4001 未授权
            </summary>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponse.OK``1(``0)">
            <summary>
            Code = 2000: 正常响应
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponse.BadRequest(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            状态码: 4000 错误的请求信息:参数检验失败等等
            </summary>
            <param name="modelState"></param>
            <returns></returns>
        </member>
        <member name="T:KaneBlake.Basis.Services.ServiceResponse`1">
            <summary>
            服务请求成功响应 
            </summary>
            <remarks>状态码: 2000</remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KaneBlake.Basis.Services.ServiceResponse`1.Result">
            <summary>
            响应数据
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Services.ServiceLocationResponse">
            <summary>
            服务重定向响应
            </summary>
            <remarks>状态码: 3002</remarks>
        </member>
        <member name="P:KaneBlake.Basis.Services.ServiceLocationResponse.Location">
            <summary>
            重定向地址
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Services.ServiceProblemResponse`1">
            <summary>
            服务异常响应
            </summary>
            <remarks>状态码: 4000 等</remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KaneBlake.Basis.Services.ServiceProblemResponse`1.Errors">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Services.ServiceStatusCodes">
            <summary>
            服务响应状态码
            </summary>
        </member>
        <member name="F:KaneBlake.Basis.Services.ServiceStatusCodes.Status2000OK">
            <summary>
            正常响应状态码
            </summary>
        </member>
        <member name="T:KaneBlake.Basis.Services.ServiceResponseExtensions">
            <summary>
            ServiceResponse 扩展方法
            </summary>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponseExtensions.TryAddTraceId(KaneBlake.Basis.Services.ServiceResponse,System.String)">
            <summary>
            设置 traceId 的值
            </summary>
            <param name="serviceResponse"></param>
            <param name="traceId"></param>
        </member>
        <member name="M:KaneBlake.Basis.Services.ServiceResponseExtensions.ContainsTraceId(KaneBlake.Basis.Services.ServiceResponse)">
            <summary>
            判断扩展字段中是否包含 traceId
            </summary>
            <param name="serviceResponse"></param>
            <returns></returns>
        </member>
    </members>
</doc>
