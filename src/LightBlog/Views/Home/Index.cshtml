@using Microsoft.AspNetCore.Authorization;
@using LightBlog.Infrastruct.Entities;
@using LightBlog.Services;
@inject IAuthorizationService AuthorizationService
@inject IUserService<User> UserService
@{
    ViewData["Title"] = "Home Page";
    ViewContext.RouteData.Values.TryGetValue("controller", out object ControllerName);
    ViewContext.RouteData.Values.TryGetValue("action", out object ActionName);
    if ((string)ControllerName == "Home" && (string)ActionName == "BlogView")
    {
        Layout = "_BlogLayout";
    }
    else
    {
        Layout = "_Layout";
    }
    ViewContext.RouteData.Values.TryGetValue("BloggerName", out object _bloggerName);
    var BloggerName = (string)_bloggerName;
    int pmFlag = 0;
    if (UserService.IsAuthenticated() && UserService.UserName == BloggerName)
    {
        pmFlag = 1;
    }
}
@model PostsViewModel

<link href="https://cdn.bootcss.com/element-ui/2.11.1/theme-chalk/index.css" rel="stylesheet">
<style>
    .post-preview {
        padding: 4%;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);
        border-radius: .25rem;
        margin: 0 0 5%;
    }

    .post-title {
        width: 100%
    }

    .post-entry {
        width: 100%;
        word-break: break-all;
    }

    .post-preview .post-read-more {
        float: right;
        padding: 2px 8px;
        color: #986dbd !important;
        border: 1px solid #986dbd;
        border-radius: 5px;
        background: #fff;
        margin-right: 6px;
    }

    .post-preview .post-del {
        float: right;
        padding: 2px 8px;
        color: #f44336 !important;
        border: 1px solid #f44336;
        border-radius: 5px;
        background: #fff;
        margin-right: 6px;
    }

    .post-preview .post-edit {
        float: right;
        padding: 2px 8px;
        color: #03a9f4 !important;
        border: 1px solid #03a9f4;
        border-radius: 5px;
        background: #fff;
        margin-right: 6px;
    }

    .navigate-page > a {
        float: left;
        padding: 8px 8px;
        color: #337ab7 !important;
        border: 2px solid #337ab7;
        border-radius: 1px;
        background: #fff;
    }

    .navigate-page > .prev {
        float: left;
    }

    .navigate-page > .next {
        float: right;
    }
</style>
<div id="posts-view"></div>
<script src="https://cdn.bootcss.com/axios/0.19.0/axios.min.js"></script>
<script src="https://cdn.bootcss.com/qs/6.8.0/qs.js"></script>
<script src="https://cdn.bootcss.com/vue/2.6.10/vue.min.js"></script>
<script src="https://cdn.bootcss.com/element-ui/2.11.1/index.js"></script>

<script type="text/x-template" id="posts-view-template">
    <div v-loading.fullscreen.lock="loading">
        <div class="post-entries">
            <div class="row post-preview" v-for="post in Model.PostEntries">
                <div class="post-title">
                    <h2>
                        <a class="" :href="'/blog/' + post.AuthorName + '/' + post.PostId" target="_blank">{{post.Title}}</a>
                    </h2>
                </div>
                <div class="post-excerpt">
                    <p class="" style="text-indent:2em">{{post.Excerpt}}</p>
                </div>

                <div class="post-entry">
                    <a :href="'/blog/' + post.AuthorName" class="">{{post.AuthorName}}</a>&nbsp;&nbsp;发布于 {{(new Date(post.Published)).toLocaleString()}}
                    <span class="">
                        <a href="" title="0001-01-01 08:05" class="gray">
                            评论({{post.CommentCount}})
                        </a>
                    </span>
                    <span class=""><a :href="'/blog/' + post.AuthorName + '/' + post.PostId" class="">阅读({{post.PostViews}})</a></span>
                    <template v-if="pmFlag">
                        <div class="post-manage">
                            <a :href="'/blog/' + post.AuthorName + '/' + post.PostId" class="post-read-more">阅读全文</a>
                            <a :href="'/pm/EditPost?id=' + post.PostId" class="post-edit">修改 </a>
                            <a :href="'/pm/DelPost?id=' + post.PostId" class="post-del">删除</a>
                        </div>
                    </template>
                </div>
            </div>
        </div>
        <div class="navigate-page">
            <a v-if="Model.HasLastPage" href="javascript:void(0)" v-on:click="GetLastPage" class="prev">← 上一页</a>
            <a v-if="Model.HasNextPage" href="javascript:void(0)" v-on:click="GetNextPage" class="next">下一页 →</a>
        </div>
    </div>
</script>
<script>
    var pmFlag = @Html.Raw(pmFlag);
    var pagePara = {
        BloggerName:'@Html.Raw(BloggerName)',
        startIndex: '@Html.Raw(Model.FirstPostId)',
        pageSize: 5,
        pageIndex: @Html.Raw(Model.CurrPageIndex),
    };
    var modelData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    const service = axios.create({
        baseURL: '/',
        timeout: 5000
    })
    service.interceptors.request.use(
        config => {
            // axio对于data复杂对象默认使用Content-Type: application/json;
            config.data = Qs.stringify(config.data)
            config.headers['Content-type'] = 'application/x-www-form-urlencoded'
            return config
        },
        error => {
            console.log(error)
            return Promise.reject(error)
        }
    )
    service.interceptors.response.use(
        response => {
            return response
        },
        error => {
            console.log('err:' + error)
            return Promise.reject(error)
        }
    )
    var component = {
        template: '#posts-view-template',
        data() {
            return {
                Model: modelData,
                loading: false,
                pmFlag: pmFlag
            }
        },
        methods: {
            GetNextPage() {
                this.loading = true;
                pagePara.pageIndex++
                service({
                    url: '/PagePosts',
                    method: 'post',
                    data: pagePara
                }).then((response) => {
                    modelData.HasNextPage = response.data.HasNextPage;
                    modelData.HasLastPage = response.data.HasLastPage;
                    modelData.PostEntries = response.data.PostEntries;
                    this.loading = false;
                    }).catch((error) => {
                        this.loading = false;
                })
            },
            GetLastPage() {
                this.loading = true;
                pagePara.pageIndex--
                service({
                    url: '/PagePosts',
                    method: 'post',
                    data: pagePara
                }).then((response) => {
                    modelData.HasNextPage = response.data.HasNextPage;
                    modelData.HasLastPage = response.data.HasLastPage;
                    modelData.PostEntries = response.data.PostEntries;
                    this.loading = false;
                    }).catch((error) => {
                        this.loading = false;
                })
                console.log("GetLastPage")
            }
        }
    };
    var Ctor = Vue.extend(component);
    var postsView = new Ctor();
    postsView.$mount('#posts-view');
</script>
